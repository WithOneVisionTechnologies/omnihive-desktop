import { app, BrowserWindow, shell, Menu, MenuItemConstructorOptions } from "electron";
import isDev from "electron-is-dev";
import path from "path";

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
    // eslint-disable-line global-require
    app.quit();
}

// Variables
let splash: BrowserWindow;
let initialLaunchComplete = false;
const isMac = process.platform === "darwin";

// Setup menu
const menuTemplate: MenuItemConstructorOptions[] = [];

if (isMac) {
    menuTemplate.push({
        label: "OmniHive Desktop",
        submenu: [
            { role: "about" },
            { type: "separator" },
            { role: "services" },
            { type: "separator" },
            { role: "hide" },
            { role: "hideOthers" },
            { role: "unhide" },
            { type: "separator" },
            { role: "quit" },
        ],
    });
}

menuTemplate.push({
    label: "File",
    submenu: [
        {
            label: "New Window",
            accelerator: "CommandOrControl+N",
            click: () => {
                createNewWindow();
            },
        },
        isMac ? { role: "close" } : { role: "quit" },
    ],
});

if (isMac) {
    menuTemplate.push({
        label: "Edit",
        submenu: [
            { role: "undo" },
            { role: "redo" },
            { type: "separator" },
            { role: "cut" },
            { role: "copy" },
            { role: "paste" },
            { role: "pasteAndMatchStyle" },
            { role: "delete" },
            { role: "selectAll" },
            { type: "separator" },
            {
                label: "Speech",
                submenu: [{ role: "startSpeaking" }, { role: "stopSpeaking" }],
            },
        ],
    });
} else {
    menuTemplate.push({
        label: "Edit",
        submenu: [
            { role: "undo" },
            { role: "redo" },
            { type: "separator" },
            { role: "cut" },
            { role: "copy" },
            { role: "paste" },
            { role: "delete" },
            { type: "separator" },
            { role: "selectAll" },
        ],
    });
}

menuTemplate.push({
    label: "View",
    submenu: [
        { role: "reload" },
        { role: "forceReload" },
        { role: "toggleDevTools" },
        { type: "separator" },
        { role: "resetZoom" },
        { role: "zoomIn" },
        { role: "zoomOut" },
        { type: "separator" },
        { role: "togglefullscreen" },
    ],
});

if (isMac) {
    menuTemplate.push({
        label: "Window",
        submenu: [
            { role: "minimize" },
            { role: "zoom" },
            { type: "separator" },
            { role: "front" },
            { type: "separator" },
            { role: "window" },
        ],
    });
} else {
    menuTemplate.push({
        label: "Window",
        submenu: [{ role: "minimize" }, { role: "zoom" }, { role: "close" }],
    });
}

menuTemplate.push({
    role: "help",
    submenu: [
        {
            label: "Learn More",
            click: async () => {
                await shell.openExternal("https://electronjs.org");
            },
        },
    ],
});

// Set Menu
const menu = Menu.buildFromTemplate(menuTemplate);
Menu.setApplicationMenu(menu);

// Set application icon
app.dock.setIcon(path.join(__dirname, "assets", "images", "dock_icon.png"));

// Remote debugging port
if (isDev) {
    app.commandLine.appendSwitch("remote-debugging-port", "8315");
}

const initializeApplication = () => {
    // Set up splash screen
    splash = new BrowserWindow({
        width: 800,
        height: 600,
        icon: path.join(__dirname, "assets", "images", "Application.icns"),
        resizable: false,
        center: true,
        closable: false,
        movable: false,
        frame: false,
        alwaysOnTop: true,
        show: true,
        transparent: true,
    });
    splash.loadFile(path.join(__dirname, "assets", "splash.html"));

    createNewWindow();
};

const createNewWindow = (): void => {
    // Create the browser window.
    const appWindow = new BrowserWindow({
        width: 1280,
        height: 800,
        frame: true,
        show: false,
        resizable: true,
        fullscreenable: true,
        webPreferences: {
            nodeIntegration: true,
        },
    });

    // and load the index.html of the app.
    appWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

    // Open the DevTools.
    if (isDev) {
        appWindow.webContents.openDevTools({ mode: "detach" });
    }

    appWindow.on("ready-to-show", () => {
        if (!initialLaunchComplete) {
            splash.destroy();
            initialLaunchComplete = true;
        }

        appWindow.show();
    });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", initializeApplication);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
    if (process.platform !== "darwin") {
        app.quit();
    }
});

app.on("activate", () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
        initializeApplication();
    }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
